from aiogram import Router, Bot, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select
import config
import database.requests
from database.db import async_session
from database.requests import set_user
from database.db import User

router = Router()
router.message.filter(F.chat.type == 'private')
API_TOKEN = config.TOKEN

bot = Bot(token=API_TOKEN)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await set_user(message.from_user.id, message.from_user.username or "Unknown")

    text = (f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>@oncologica_ru_bot</b>!\n'
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É '
            f'–í–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.')

    async with async_session() as session:
        result = await session.execute(select(User).where(User.tg_id == message.from_user.id))

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è',
                                  url='https://oncologica.ru/wp-content/uploads/2022/08/PUBLICHNAYA_OFERTA_O_ZAKLYUCHENII_DOGOVORA_POZHERTVOVANIYA.pdf')],
            [InlineKeyboardButton(text='–°–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)', callback_data='start_agree')]
        ])

    await message.answer(text, reply_markup=markup, parse_mode=ParseMode.HTML)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
class WaitPhoneFSM(StatesGroup):
    waiting_for_phone = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)"
@router.callback_query(F.data == 'start_agree')
async def start_agree(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    text = (f'–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π <b>–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê</b>.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π '
          f'<i>¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞¬ª</i> '
          f'–∏ –ø–æ–ª—É—á–∏—Ç–µ —á–µ–∫-–ª–∏—Å—Ç –ø–æ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ –æ–Ω–∫–æ–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π <b>–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>')

    markup = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True),]
    ], resize_keyboard=True, one_time_keyboard=True)

    await callback.message.answer(text=text, reply_markup=markup, parse_mode='HTML')
    await state.set_state(WaitPhoneFSM.waiting_for_phone)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(WaitPhoneFSM.waiting_for_phone)
async def get_number(message: Message, state: FSMContext):
    if message.contact:
        await database.requests.set_user_phone_and_name(tg_id=message.from_user.id,
                                                        user_name=message.contact.first_name,
                                                        phone_number=message.contact.phone_number)

        file_path = 'mediafiles/–ß–µ–∫-–ª–∏—Å—Ç_ –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –æ–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –∏ —á–µ–∫-–∞–ø—ã.pdf'
        input_file = FSInputFile(file_path)
        text = '–°–ø–∞—Å–∏–±–æ! üéâ'
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        with open(file_path, 'rb') as file:
            await message.answer_document(text=text, document=input_file)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        chat_id = message.chat.id
        await bot.send_video(chat_id, video=config.VIDEO_ID)

        green_block_text = ('üå∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é. '
                            '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–î—Ä—É–≥–∞—è —Å—É–º–º–∞¬ª, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—É–º–º—É.')
        green_block_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='1 480‚ÇΩ', callback_data='donate_1480'),
             InlineKeyboardButton(text='1 290‚ÇΩ', callback_data='donate_1290'),
             InlineKeyboardButton(text='990‚ÇΩ', callback_data='donate_990')],
            [InlineKeyboardButton(text='760‚ÇΩ', callback_data='donate_760'),
             InlineKeyboardButton(text='400‚ÇΩ', callback_data='donate_400'),
             InlineKeyboardButton(text='180‚ÇΩ', callback_data='donate_180')],
            [InlineKeyboardButton(text='–î—Ä—É–≥–∞—è —Å—É–º–º–∞', callback_data='donate_another_amount')]
        ])

        await message.answer(text=green_block_text, reply_markup=green_block_markup)

        await state.clear()
    else:
        text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç.'

        await message.answer(text)
        return
